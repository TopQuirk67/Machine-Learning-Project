summary(fit2)
fit2<-glm(windnum ~ windnum+magn, data=shuttle, family=binomial)
fit2<-glm(usenum ~ windnum+magn, data=shuttle, family=binomial)
summary(fit2)
fit2$coeff
exp(fit2$coeff)
fit3<-glm(usenum~windnum,data=shuttle,family=binomial)
fit4<-glm(I(1-usenum)~windnum,data=shuttle,family=binomial)
fit3$coeff
fit4$coeff
head(InsectSprays)
str(InsectSprays)
Ins<-subset(InsectSprays,spray=="A"|spray=="B")
str(Ins)
Ins$A<-Ins$spray=="A"
fit5<-glm(count~A,data=Ins,family=poisson)
summary(fit5)
exp(fit5$coeff)
relevel(InsectSpray$spray,"B")
head(InsectSpray$spray,)
head(InsectSpray$spray)
head(InsectSpray)
relevel(InsectSprays$spray,"B")
levels(InsectSprays$spray)
InsectSprays$spray
fit <- glm(count ~ relevel(spray, "B"), data = InsectSprays, family = poisson)
summary(fit)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x>knot)*(x-knot))
splineTerms
xMat<-cbind(1,x,splineTerms)
yhat<-predict(lm(y~xMat-1))
plot(x,y,frame=FALSE,pch=21,cex=2,bg="lightblue")
lines(x,yhat,col="red",lwd=2)
fitty<-lm(y~xMat-1)
summary(fitty)
xMat
y
swirl
library(swirl)
exit
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays,15)
sE
summary(InsectSprays[,2])
sapply(class(InsectSprays))
sapply(InsectSprays,FUN=class)
sapply(InsectSprays,class)
fit<-lm(count~spray)
fit<-lm(count~spray,data=InsectSprays)
summary(fit)
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray-1,data=InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray2,data=InsectSprays)
summary(fit2)$coeff
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year,data=hunger)
summary(fit)$coef
lmF<-lm(Numeric~Year,data=hunger[hunger$Sex="Female"])
lmF<-lm(Numeric~Year,data=hunger[hunger$Sex=="Female"])
lmF<-lm(Numeric~Year,data=hunger[hunger$Sex=="Female",])
lmF<-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],data=hunger)
lmM<-lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],data=hunger)
lmBoth<-lm(Numeric~Year+Sexdata=hunger)
lmBoth<-lm(Numeric~Year+Sex,data=hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,data=hunger)
summary(lmInter)
play()
str(out2)
head(out2)
out2
mean(out2)
mean(out2$y)
mean(out2$x)
nxt()
fit <- lm(y ~ x, out2)
plot(fit,which=1)
fitno<-lm(y<-x,out2[-1,])
fitno<-lm(y[-1,]<-x[-1,],out2)
fitno<-lm(out2$y[-1,]<-out2$x[-1,])
fitno<-lm(out2[-1,]$y<-out2[-1,]$x)
bullshit<-out2[-1,];fitno<-lm(y~x,bullshit)
play()
summary(fitno)
nxt()
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno<-out2[1,"y"]-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
View(hatvalues(fit))
play()
head(hatvalues(fit))
nxt()
play()
summary(fit)
fit
summary(fit)$resid
summary(fit)$standarderror
nxt()
sigma<-sqrt(0.4966/49)
play()
deviance(fit)
df.residual(fit)
nxt
nxt()
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd<-residual(fit)/(sigma*sqrt(1-hatvalues(fit)))
rstd<-fit$residual/(sigma*sqrt(1-hatvalues(fit)))
play()
rstd
rstandard(fit)
nxt()
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit, which=2)
sigma1<-sqrt(deviance(fitno)/df.residual(fit))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fitno, out2)-predict(fit, out2)
play()
str(dy)
nxt()
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
rgp1()
rgp2()
head(Swiss)
head(swiss)
mdl<-lm(Fertility~.,data=swiss)
vif(mdl)
mdl2<-lm(Fertility~Agriculture+Education+Catholic+Infant.Mortality,data=swiss)
vif(mdl2)
x1c<-simbias()
apply(x1c,1,mean)
fit1<-lm(Fertility~Agriculture,data=swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education,data=swiss)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-(deviance(fit1)-deviance(fit3))
n<-(deviance(fit1)-deviance(fit3))/2
play()
deviance(fit1)
deviance(fit3)
d
nxt()
n/d
pf(n/d,2,43,lower.tail=FALSE)
play()
?pf
nxt()
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
ravenData
mdl<-glm(ravenWinNum~ravenScore,family="binomial",data=ravenData)
lodds<-predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
tail(hits)
class(hist[,'date'])
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, family=poisson, data=hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,"visits"])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(0.95,lambda)
mdl2<-glm(visits ~ date,offset=log(visits+1),data=hits,family=poisson)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
source('~/Football Analytics/nflmedia/download_nfl_playbooks.R')
download_nfl_playbooks(2014,"POST",dlweeks=1)
source('~/Football Analytics/nflmedia/download_nfl_playbooks.R')
download_nfl_playbooks(2014,"POST",dlweeks=1)
source('~/Football Analytics/nflmedia/download_nfl_playbooks.R')
download_nfl_playbooks(seg="POST",dlweeks=2,year=2014)
install.packages(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
head(training)
head(intrain)
head(inTrain)
dim(inTrain)
dim(spam)
3451/4601
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
install.packages("e1071")
install.packages("caret")
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
library(caret)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
head(training)
pairs(~.,data=training)
pairs(~.Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data=training)
pairs(~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data=training)
pairs(~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data=training,color=Species)
pairs(~ Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data=training,colour=Species)
setwd("C:/Users/Gareth Houk/Documents/datascience coursera/Machine Learning/Lecture Notes Quizzes Project")
library(caret)
# load data
trdata<-read.csv("pml-training.csv")
tsdata<-read.csv("pml-testing.csv")
#
tskeepcol<-!is.na(unname(apply(tsdata,FUN=unique,2)))
tsdata<-tsdata[,tskeepcol]
trdata<-trdata[,tskeepcol]
tsdata<-tsdata[,-c(1:7)]
trdata<-trdata[,-c(1:7)]
str(trdata)
cormtx<-cor(trdata[sapply(trdata, is.numeric)])
diag(cormtx)<-0
levelplot(cormtx,scales=list(x=list(rot=90)))
cor_cut<-0.9
idx1d<-which(abs(cormtx)>cor_cut)
idxcol<-idx1d %% dim(cormtx)[1]
idxrow<-ceiling(idx1d/dim(cormtx)[1])
inTrain<-createDataPartition(y=trdata$classe,p=0.7,list=FALSE)
training <- trdata[inTrain,]
validation <- trdata[-inTrain,]
model_rpart <- train(classe ~. ,data=training,method="rpart")
pred_rpart  <- predict(model_rpart, validation)
confusionMatrix(pred_rpart, testing$classe)
confusionMatrix(pred_rpart, validation$classe)
hist(training[,classe=="A"])
hist(training[,training$classe=="A"])
head(training[,training$classe=="A"])
head(training[training$classe=="A"],)
head(training)
head(subset(data=training,classe=="A"))
?subset
training[,1:1]
training[1:1,]
training[,training$classe=="A"]
training[,classe=="A"]
training[training$classe=="A",]
hist(training[training$classe=="A",])
hist(training[training$classe=="A",-"classe"])
hist(training[training$classe=="A",-c("classe")])
hist(training[training$classe=="A",1:10])
cla<-training[training$classe=="A",]
hist(cla[,-"classe"])
hist(cla[,1:10])
hist(cla[,1])
hist(cla[,2])
hist(cla[,3])
hist(cla[,4])
hist(cla[,5])
hist(cla[,51])
hist(cla[,52])
hist(cla[,53])
dim(cla)
hist(cla[,-53])
hist(cla[,-c(53)])
model_gbm   <- train(classe ~. ,data=training,method="gbm",verbose=FALSE)
model_gbm
model_lda   <- train(classe ~. ,data=training,method="lda")
pred_lda    <- predict(model_lda, validation)
confusionMatrix(pred_lda  , validation$classe)
preProc<-preProcess(training[,-53],method="pca",pcaComp=2)
preProc<-preProcess(training[,-53],method="pca",pcaComp=3)
preProc<-preProcess(training[,-53],method="pca",pcaComp=4)
preProc<-preProcess(training[,-53],method="pca",pcaComp=5)
preProc<-preProcess(training[,-53],method="pca",pcaComp=6)
preProc<-preProcess(training[,-53],method="pca",pcaComp=7)
preProc<-preProcess(training[,-53],method="pca",pcaComp=8)
preProc<-preProcess(training[,-53],method="pca",pcaComp=9)
preProc<-preProcess(training[,-53],method="pca",pcaComp=10)
preProc<-preProcess(training[,-53],method="pca",pcaComp=11)
preProc<-preProcess(training[,-53],method="pca",pcaComp=12)
preProc<-preProcess(training[,-53],method="pca",pcaComp=13)
preProc<-preProcess(training[,-53],method="pca",pcaComp=14)
preProc<-preProcess(training[,-53],method="pca",pcaComp=15)
model_rf    <- train(classe~.,data=training,method="rf",preProcess="pca",numComp=2)
inTrain<-createDataPartition(y=trdata$classe,p=0.7,list=FALSE)
training <- trdata[inTrain,]
validation <- trdata[-inTrain,]
inTrain<-createDataPartition(y=trdata$classe,p=0.1,list=FALSE)
training <- trdata[inTrain,]
validation <- trdata[-inTrain,]
model_rf    <- train(classe ~. ,data=training,method="rf",prox=TRUE)
model_rf    <- train(classe ~. ,data=training,method="rf",prox=TRUE)
train(training$classe ~ ., method="rf", trControl=trainControl(method = "cv", number = 4), data=training)
train(training$classe ~ ., method="rf", trControl=trainControl(method = "cv", number = 4), preProcess=c("center", "scale"),data=training)
model_rf    <- train(classe~.,data=training,method="rf",preProcess=c("center", "scale"))
inTrain<-createDataPartition(y=trdata$classe,p=0.7,list=FALSE)
training <- trdata[inTrain,]
validation <- trdata[-inTrain,]
set.seed(450921)
set.seed(450921)
start.time <- Sys.time()
model_rf    <- train(classe~.,data=training,method="rf",preProcess=c("center", "scale"),trControl=trainControl(method = "cv", number = 4))
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
set.seed(450921)
start.time <- Sys.time()
#model_rf    <- train(classe~.,data=training,method="rf",preProcess=c("center", "scale"),trControl=trainControl(method = "cv", number = 4))
model_rf    <- train(classe~.,data=training,method="rf",trControl=trainControl(method = "cv", number = 4))
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
set.seed(8720)
start.time <- Sys.time()
model_gbm   <- train(classe ~. ,data=training,method="gbm",verbose=FALSE) # CPU bomb
pred_rpart  <- predict(model_rpart, validation)
pred_lda    <- predict(model_lda, validation)
pred_rf     <- predict(model_rf, validation)
pred_rpart  <- predict(model_rpart, validation)
pred_lda    <- predict(model_lda, validation)
pred_rf     <- predict(model_rf, validation)
confusionMatrix(pred_rpart, validation$classe)
confusionMatrix(pred_lda  , validation$classe)
confusionMatrix(pred_rf   , validation$classe)
max(cormtx)
cormtx2
cormtx<-cor(trdata[sapply(trdata, is.numeric)])
diag(cormtx)<-0
levelplot(cormtx,scales=list(x=list(rot=90)))
idx1d<-which(abs(cormtx)>cor_cut)
idxcol<-idx1d %% dim(cormtx)[1]
idxrow<-ceiling(idx1d/dim(cormtx)[1])
cormtx2<-cormtx[unique(sort(idxrow)),unique(sort(idxcol))]
levelplot(cormtx2,scales=list(x=list(rot=90)))
cormtx2
cor_cut<-0.975
cormtx<-cor(trdata[sapply(trdata, is.numeric)])
diag(cormtx)<-0
levelplot(cormtx,scales=list(x=list(rot=90)))
idx1d<-which(abs(cormtx)>cor_cut)
idxcol<-idx1d %% dim(cormtx)[1]
idxrow<-ceiling(idx1d/dim(cormtx)[1])
cormtx2<-cormtx[unique(sort(idxrow)),unique(sort(idxcol))]
levelplot(cormtx2,scales=list(x=list(rot=90)))
#attr(ccc,"dimnames")[[1]][4]
cormtx2
plot(training$total_accel_belt,training$roll_belt)
cor(training$total_accel_belt,training$roll_belt)
plot(training$accel_belt_z,training$roll_belt)
cor_cut<-0.99
cormtx<-cor(trdata[sapply(trdata, is.numeric)])
diag(cormtx)<-0
levelplot(cormtx,scales=list(x=list(rot=90)))
idx1d<-which(abs(cormtx)>cor_cut)
idxcol<-idx1d %% dim(cormtx)[1]
idxrow<-ceiling(idx1d/dim(cormtx)[1])
cormtx2<-cormtx[unique(sort(idxrow)),unique(sort(idxcol))]
levelplot(cormtx2,scales=list(x=list(rot=90)))
attr(cormtx2)[[1]][1]
attr(cormtx2,"dimnames")[[1]][1]
attr(cormtx2,"dimnames",2)
attr(cormtx2,"dimnames",1)
cormtx2
cor_cut<-0.98
cormtx<-cor(trdata[sapply(trdata, is.numeric)])
diag(cormtx)<-0
levelplot(cormtx,scales=list(x=list(rot=90)))
idx1d<-which(abs(cormtx)>cor_cut)
idxcol<-idx1d %% dim(cormtx)[1]
idxrow<-ceiling(idx1d/dim(cormtx)[1])
cormtx2<-cormtx[unique(sort(idxrow)),unique(sort(idxcol))]
levelplot(cormtx2,scales=list(x=list(rot=90)))
cormtx2
attr(cormtx2,"dimnames"[[1]]
)
attr(cormtx2,"dimnames")[[1]]
hcor<-attr(cormtx2,"dimnames")[[1]]
hcor<-attr(cormtx2,"dimnames")[[1]]
hcortrdata <- trdata[,hcor]
pairs(hcortrdata)
cor_cut<-0.95
cormtx<-cor(trdata[sapply(trdata, is.numeric)])
diag(cormtx)<-0
levelplot(cormtx,scales=list(x=list(rot=90)))
idx1d<-which(abs(cormtx)>cor_cut)
idxcol<-idx1d %% dim(cormtx)[1]
idxrow<-ceiling(idx1d/dim(cormtx)[1])
cormtx2<-cormtx[unique(sort(idxrow)),unique(sort(idxcol))]
levelplot(cormtx2,scales=list(x=list(rot=90)))
hcor<-attr(cormtx2,"dimnames")[[1]]
hcortrdata <- trdata[,hcor]
pairs(hcortrdata)
cor_cut<-0.975
cormtx<-cor(trdata[sapply(trdata, is.numeric)])
diag(cormtx)<-0
levelplot(cormtx,scales=list(x=list(rot=90)))
idx1d<-which(abs(cormtx)>cor_cut)
idxcol<-idx1d %% dim(cormtx)[1]
idxrow<-ceiling(idx1d/dim(cormtx)[1])
cormtx2<-cormtx[unique(sort(idxrow)),unique(sort(idxcol))]
levelplot(cormtx2,scales=list(x=list(rot=90)))
hcor<-attr(cormtx2,"dimnames")[[1]]
hcortrdata <- trdata[,hcor]
pairs(hcortrdata)
names(hcortrdata)
dim(training)
dim(training)[2]
confusionMatrix(pred_rf   , validation$classe)$accuracy
cm_rf   <-confusionMatrix(pred_rf   , validation$classe); cm_rf
cm_rf$Accuracy
str(cm_rf)
attr(cm_rf,"Accuracy")
attr(cm_rf,"dimnames")
cm_rf$overall
cm_rf$overall[1]
cm_rf$overall[1][1]
unname(cm_rf$overall[1])
model_rf
predict(model_rf,testing)
predict(model_rf,tsdata)
print(cm_rf_pca)
print(cm_rf)
set.seed(450921)
start.time <- Sys.time()
model_rf_pca <- train(classe~.,data=training,method="rf",trControl=trainControl(method = "cv", number = 4),preProcess="pca")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
time.takenRFPCA<-time.taken
# Prediction in validation sample
pred_rf_pca <- predict(model_rf_pca, validation)
# Cross validation
cm_rf_pca <-confusionMatrix(pred_rf_pca, validation$classe); print(cm_rf_pca)
cm_rf_pca
time.takenRF
time.taken
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
answers<-predict(model_rf,tsdata)
setwd("answers")
getwd()
pml_write_files(answers)
answers
round(unname(cm_rf$overall[1]),3)
round(unname(cm_rf$overall[1]),3)^20
getwd()
dir()
setwd("..")
getwd()
dir()
setwd("GH Machine Learning Project")
dir()
setwd("Machine-Learning-Project")
getwd()
dir()
trdata<-read.csv("pml-training.csv")
tsdata<-read.csv("pml-testing.csv")
tskeepcol<-!is.na(unname(apply(tsdata,FUN=unique,2)))
tsdata<-tsdata[,tskeepcol]
trdata<-trdata[,tskeepcol]
tsdata<-tsdata[,-c(1:7)]
trdata<-trdata[,-c(1:7)]
names(trdata)
nearZeroVar(trdata,saveMetrics=TRUE)
length(nearZeroVar(trdata,saveMetrics=TRUE))
nzv<-nearZeroVar(trdata,saveMetrics=TRUE)
nzv
dim(nzv)
nzv$nzv
sum(nzv$nzv)
100*round(unname(cm_rf$overall[1]),3)^20
100*round(unname(cm_rf$overall[1]),2)^20
round(unname(cm_rf$overall[1]),2)^20
round((unname(cm_rf$overall[1]))^20,2)
round(100*(unname(cm_rf$overall[1]))^20,2)
answers
